with(RegularChains);
R := PolynomialRing([x, y, z]);
p1 := x^2+5-2*x*z;
p2 := z^3*y+x*y^2;
p3 := -8*z^3+3*y^2;
F := [p1, p2, p3];
MainVariable(p1, PolynomialRing([x, y, z]));
MainVariable(p1, PolynomialRing([z, y, x]));
prem(p1, p2, x);
prem(p2, p1, z);
prem(p3, p2, y);

premcustom := proc(Fparam,Gparam, MainVar)
local R, G, F, lcg, lcr, dr, dg:
R := Fparam:
G := Gparam:
F := Fparam:
#p1 := x^2+5-2*x*z;
#p2 := z^3*y+x*y^2;
#p3 := -8*z^3+3*y^2;
#R := p2:
#G := p1:
#F := p2:
#MainVar := z:
if degree(G,MainVar) = 0 then
 print("return 0"):
 return 0:
elif degree(F, MainVar) < degree(G, MainVar) then 
 print("return R"):
 return R:
end if:
lcg := coeff(G, MainVar, degree(G, MainVar)):
print("lcg",lcg):
dg := degree(G, MainVar):
print("dg",dg):
while degree(R, MainVar) >= degree(G, MainVar) do
  lcr := coeff(R, MainVar, degree(R, MainVar)):
  print("lcr",lcr):
  dr := degree(R, MainVar):
  print("dr",dr):
  R := simplify(lcg * R - lcr * G * (x^(dr - dg))):
  print("R",R):
od:
return R:
end proc:
p1 := x^2+5-2*x*z;
p2 := z^3*y+x*y^2;
p3 := -8*z^3+3*y^2;
prem(p1,p2,x);
prem(p2,p1,z);
prem(p3, p2, y);

premcustom(p1,p2,x);
premcustom(p2,p1,z); #why this looping
premcustom(p3,p2,y);

premas := proc(P,A, PRing)
local R, i, x;
R := P;
i := nops(A);
while i <> 0 do
 x := MainVariable(A[i], PRing);
 R := prem(R, A[i],x);
 i := i - 1:
od:
return R:
end proc:

B := [x^2-2*z*x+5, -8*z^3+3*y^2]:
p2 := y^2*x+y*z^3;
premas(p2, B, PolynomialRing([x, y, z]));

remset := proc(P,A, PRing)
local R, r, i, x, p;
R := [];
for p in P do
 r := premas(p, A, PRing);
 if r <> 0 then
  R := [op(R), r]:
 end if:
od:
return R:
end proc:

A := [x^2-2*z*x+5]:
B := [x^2-2*z*x+5, -8*z^3+3*y^2]:
F := [p1, p2, p3];
remset(F, A, PolynomialRing([z, y, x]));
remset(F, B, PolynomialRing([x, y, z]));

basicset := proc(Pparam, PRing)
local B, b, PP, pos, p, P:
B := []:
P := Pparam:
while P <> [] do
 member(min(map(x -> MainDegree(Rank(x, PRing),PRing), P)),map(x -> MainDegree(Rank(x, PRing),PRing), P),'pos'):
 b := P[pos]:
 B := [op(B), b]:
 PP := []:
 for p in P do
  if remset(p, B, PRing) = [] then
   PP := [op(PP), p]:
  end if:
 od:
 P := PP:
od:
return B:
end proc:

basicset(F, PolynomialRing([z, y, x]));
basicset(F, PolynomialRing([x, y, z]));

charset := proc(Pparam, PRing)
local R, C, P;
R := Pparam:
P := Pparam:
while R <> [] do
 C := basicset(P, PRing);
 #print("C=",C);
 R := remset(P, C, PRing);
 #print("R=",R);
 P := [op(P), op(R)]:
 #print("P=",P);
od:
return C:
end proc:
charset(F, PolynomialRing([z, y, x]));





geom := proc(param1, pointset, pronounce)


end proc:

pointset := [A, [0,0], B, [0,v_B], C, [u_C, v_C], DD, [x_D, y_D], OO, [x_O, y_O]];
for i from 1 to nops(pointset)/2 do
print(i, i+1);
(pointset[i]):= pointset[i+1];
od:

A := [0,0]:
B := [0,v_B]:
C := [u_C, v_C]: 
DD := [x_D, y_D]:
OO := [x_O, y_O]:

pronounceresult := []:
pronouncelist := []:
pronounce := [[para, DD, A, B, C], [para, DD, C, A, B], [coll, OO, A, C], [coll, OO, B, DD]], [[coll, A, B, C]],[[midpoint, OO, A, C]];
for i from 1 to nops([pronounce]) do
print(pronounce[i]);
for j from 1 to nops(pronounce[i]) do
print("*****",pronounce[i][j]);
od:
od:
pronounce[1];
pronounce[2];
pronounce[3];

pronounceresult := []:
pronouncelist := []:
for i from 1 to nops([pronounce]) do
print(pronounce[i]);
pronouncelist := []:
for j from 1 to nops(pronounce[i]) do
print("*****",pronounce[i][j]);
if pronounce[i][j][1] = coll then
pronouncelist := [op(pronouncelist), (pronounce[i][j][3+1][2] - pronounce[i][j][1+1][2])*(pronounce[i][j][2+1][1] - pronounce[i][j][1+1][1]) - (pronounce[i][j][3+1][1] - pronounce[i][j][1+1][1])*(pronounce[i][j][2+1][2] - pronounce[i][j][1+1][2])]:
elif pronounce[i][j][1] = para then
pronouncelist := [op(pronouncelist), (pronounce[i][j][4+1][2] - pronounce[i][j][3+1][2])*(pronounce[i][j][2+1][1] - pronounce[i][j][1+1][1]) - (pronounce[i][j][4+1][1] - pronounce[i][j][3+1][1])*(pronounce[i][j][2+1][2] - pronounce[i][j][1+1][2])]:
elif pronounce[i][j][1] = perp then
pronouncelist := [op(pronouncelist), (pronounce[i][j][4+1][2] - pronounce[i][j][3+1][2])*(pronounce[i][j][2+1][2] - pronounce[i][j][1+1][2]) + (pronounce[i][j][4+1][1] - pronounce[i][j][3+1][1])*(pronounce[i][j][2+1][1] - pronounce[i][j][1+1][1])]: 
elif pronounce[i][j][1] = cong then
pronouncelist := [op(pronouncelist), (pronounce[i][j][4+1][2] - pronounce[i][j][3+1][2])^2 + (pronounce[i][j][4+1][1] - pronounce[i][j][3+1][1])^2 - (pronounce[i][j][2+1][2] - pronounce[i][j][1+1][2])^2 - (pronounce[i][j][2+1][1] - pronounce[i][j][1+1][1])^2]:
elif pronounce[i][j][1] = dis then
pronouncelist := [op(pronouncelist), (pronounce[i][j][1+1][1] - pronounce[i][j][2+1][1])^2 + (pronounce[i][j][1+1][2] - pronounce[i][j][2+1][2])^2 - pronounce[i][j][3+1]^2]:
elif pronounce[i][j][1] = midpoint then
pronouncelist := [op(pronouncelist), [2*pronounce[i][j][1+1][1]-pronounce[i][j][3+1][1], 2*pronounce[i][j][1+1][2]-pronounce[i][j][3+1][2]]]:
end if:
print(pronouncelist[nops(pronouncelist)]);
od:
pronounceresult := [op(pronounceresult), expand(pronouncelist)]:
od:
pronounceresult;
nops(pronounceresult);
pronounceresult[1];
pronounceresult[2];
pronounceresult[3];

A := [0,0]:
B := [0,v_B]:
C := [u_C, v_C]: 
DD := [x_D, y_D]:
OO := [x_O, y_O]:

charset(pronounceresult[1], PolynomialRing([y_O, x_O, y_D, x_D, v_C, u_C, v_B, u_B, v_A, u_A]));










basis:=proc(a,b,ord)
local i,j,k1,k;k:={};
for i in a do
   #k1:=normalf(i,b,ord);
   k1 := NormalForm(i, b, ord)
   if(k1<>0) then 
     k:=k union {k1};
   end if;  
end do;
return k;
end:   

scs := proc(Pparam, PRing)
local B, A, RR, R;
P := Pparam:
B := basicset(P, PRing);
R := remset(P, B, PRing);
if R = [] then
 return B:
end if:
RR := 
A := []:
for RRR in RR do
 A := [op(A), scs([op(P), op(RRR)])]
od:
return A:
end proc:

#PRing := PolynomialRing([z, y, x]):
#member(min(map(x -> MainDegree(Rank(x, PRing),PRing), F)),map(x -> MainDegree(Rank(x, PRing),PRing), F),'pos')
#member(1,[1,3,3],'pos');

dprem := proc(F, G, PRing)
local R:
R := F:

end proc:

depend([x,y,z],[u,v,w]);

leader(p, R);
rank(p, R);
initial(p, R);
separant(p, R);

dprem := proc(F, G, x, PRing)
local R, theta, thetax, thetaG;
R := F:
thetax := leader(G, PRing);
while remset(R, F, PRing) <> [] do
theta := leader(R, PRing);
R := prem(R, thetaG, theta, PRing)
od:
return R:
end proc:

dpremas := proc(Pparam, A)
local R, x, F, AtoRwithoutdivisible, P:
P := Pparam:
R := P;
while remset(R, A, PRing) <> [] do
 AtoRwithoutdivisible := remset(A, R, PRing);
 member(max(map(x -> MainDegree(Rank(x, PRing),PRing), AtoRwithoutdivisible)),map(x -> MainDegree(Rank(x, PRing),PRing), AtoRwithoutdivisible),'pos');
 F := AtoRwithoutdivisible[pos]:
 x := MainVariable(F, PRing);
 R := dprem(R, F, x);
od:
return R:
end proc:

with(diffalg):
#R := differential_ring(derivations = [t], ranking = [u]):
R := differential_ring(ranking = [[x,y,r]], derivations = [t], notation = diff):
p1 := m*x[2] + r*x;
p2 := m*y[2] + r*y - g;
p3 := x^2 + y^2 - l^2;
dprem(p1, p3, x);







PseudolDivisionCustom := proc(aparam, bparam, xparam)
p1 := x^2+5-2*x*z;
p2 := z^3*y+x*y^2;
p3 := -8*z^3+3*y^2;
aparam := p1:
bparam := p2:
xparam := x:
a := aparam:
b := bparam:
r := a:
n := degree(a, xparam):
m := degree(b, xparam):
q := [seq(0,i=0..n-m)]:
for i from n-m by -1 to 0  do
 if degree(r, xparam) = m + i then
  q[i+1] := coeff(r, xparam, degree(r, xparam))/coeff(b, xparam, degree(b, xparam)):
  r := r - q[i+1]*(x^i)*b:
 else
  q[i+1] := 0:
 end if:
od:
qq := 0:
for i from 0 to n-m do
 qq := qq + q[i+1]*x^i:
od:

b*qq+r-a; #valid 0
simplify(r);

